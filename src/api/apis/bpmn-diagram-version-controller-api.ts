/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BpmnDiagramVersionTO } from '../models';
import { BpmnDiagramVersionUploadTO } from '../models';
/**
 * BpmnDiagramVersionControllerApi - axios parameter creator
 * @export
 */
export const BpmnDiagramVersionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BpmnDiagramVersionUploadTO} body 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateVersion: async (body: BpmnDiagramVersionUploadTO, bpmnRepositoryId: string, bpmnDiagramId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrUpdateVersion.');
            }
            // verify required parameter 'bpmnRepositoryId' is not null or undefined
            if (bpmnRepositoryId === null || bpmnRepositoryId === undefined) {
                throw new RequiredError('bpmnRepositoryId','Required parameter bpmnRepositoryId was null or undefined when calling createOrUpdateVersion.');
            }
            // verify required parameter 'bpmnDiagramId' is not null or undefined
            if (bpmnDiagramId === null || bpmnDiagramId === undefined) {
                throw new RequiredError('bpmnDiagramId','Required parameter bpmnDiagramId was null or undefined when calling createOrUpdateVersion.');
            }
            const localVarPath = `/api/version/{bpmnRepositoryId}/{bpmnDiagramId}`
                .replace(`{${"bpmnRepositoryId"}}`, encodeURIComponent(String(bpmnRepositoryId)))
                .replace(`{${"bpmnDiagramId"}}`, encodeURIComponent(String(bpmnDiagramId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVersions: async (bpmnRepositoryId: string, bpmnDiagramId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bpmnRepositoryId' is not null or undefined
            if (bpmnRepositoryId === null || bpmnRepositoryId === undefined) {
                throw new RequiredError('bpmnRepositoryId','Required parameter bpmnRepositoryId was null or undefined when calling getAllVersions.');
            }
            // verify required parameter 'bpmnDiagramId' is not null or undefined
            if (bpmnDiagramId === null || bpmnDiagramId === undefined) {
                throw new RequiredError('bpmnDiagramId','Required parameter bpmnDiagramId was null or undefined when calling getAllVersions.');
            }
            const localVarPath = `/api/version/{bpmnRepositoryId}/{bpmnDiagramId}/all`
                .replace(`{${"bpmnRepositoryId"}}`, encodeURIComponent(String(bpmnRepositoryId)))
                .replace(`{${"bpmnDiagramId"}}`, encodeURIComponent(String(bpmnDiagramId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the latest version of the requested diagram
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersion: async (bpmnRepositoryId: string, bpmnDiagramId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bpmnRepositoryId' is not null or undefined
            if (bpmnRepositoryId === null || bpmnRepositoryId === undefined) {
                throw new RequiredError('bpmnRepositoryId','Required parameter bpmnRepositoryId was null or undefined when calling getLatestVersion.');
            }
            // verify required parameter 'bpmnDiagramId' is not null or undefined
            if (bpmnDiagramId === null || bpmnDiagramId === undefined) {
                throw new RequiredError('bpmnDiagramId','Required parameter bpmnDiagramId was null or undefined when calling getLatestVersion.');
            }
            const localVarPath = `/api/version/{bpmnRepositoryId}/{bpmnDiagramId}/latest`
                .replace(`{${"bpmnRepositoryId"}}`, encodeURIComponent(String(bpmnRepositoryId)))
                .replace(`{${"bpmnDiagramId"}}`, encodeURIComponent(String(bpmnDiagramId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {string} bpmnDiagramVersionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleVersion: async (bpmnRepositoryId: string, bpmnDiagramId: string, bpmnDiagramVersionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bpmnRepositoryId' is not null or undefined
            if (bpmnRepositoryId === null || bpmnRepositoryId === undefined) {
                throw new RequiredError('bpmnRepositoryId','Required parameter bpmnRepositoryId was null or undefined when calling getSingleVersion.');
            }
            // verify required parameter 'bpmnDiagramId' is not null or undefined
            if (bpmnDiagramId === null || bpmnDiagramId === undefined) {
                throw new RequiredError('bpmnDiagramId','Required parameter bpmnDiagramId was null or undefined when calling getSingleVersion.');
            }
            // verify required parameter 'bpmnDiagramVersionId' is not null or undefined
            if (bpmnDiagramVersionId === null || bpmnDiagramVersionId === undefined) {
                throw new RequiredError('bpmnDiagramVersionId','Required parameter bpmnDiagramVersionId was null or undefined when calling getSingleVersion.');
            }
            const localVarPath = `/api/version/{bpmnRepositoryId}/{bpmnDiagramId}/{bpmnDiagramVersionId}`
                .replace(`{${"bpmnRepositoryId"}}`, encodeURIComponent(String(bpmnRepositoryId)))
                .replace(`{${"bpmnDiagramId"}}`, encodeURIComponent(String(bpmnDiagramId)))
                .replace(`{${"bpmnDiagramVersionId"}}`, encodeURIComponent(String(bpmnDiagramVersionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BpmnDiagramVersionControllerApi - functional programming interface
 * @export
 */
export const BpmnDiagramVersionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BpmnDiagramVersionUploadTO} body 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateVersion(body: BpmnDiagramVersionUploadTO, bpmnRepositoryId: string, bpmnDiagramId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await BpmnDiagramVersionControllerApiAxiosParamCreator(configuration).createOrUpdateVersion(body, bpmnRepositoryId, bpmnDiagramId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVersions(bpmnRepositoryId: string, bpmnDiagramId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BpmnDiagramVersionTO>>> {
            const localVarAxiosArgs = await BpmnDiagramVersionControllerApiAxiosParamCreator(configuration).getAllVersions(bpmnRepositoryId, bpmnDiagramId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return the latest version of the requested diagram
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestVersion(bpmnRepositoryId: string, bpmnDiagramId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BpmnDiagramVersionTO>> {
            const localVarAxiosArgs = await BpmnDiagramVersionControllerApiAxiosParamCreator(configuration).getLatestVersion(bpmnRepositoryId, bpmnDiagramId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {string} bpmnDiagramVersionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleVersion(bpmnRepositoryId: string, bpmnDiagramId: string, bpmnDiagramVersionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BpmnDiagramVersionTO>> {
            const localVarAxiosArgs = await BpmnDiagramVersionControllerApiAxiosParamCreator(configuration).getSingleVersion(bpmnRepositoryId, bpmnDiagramId, bpmnDiagramVersionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BpmnDiagramVersionControllerApi - factory interface
 * @export
 */
export const BpmnDiagramVersionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {BpmnDiagramVersionUploadTO} body 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateVersion(body: BpmnDiagramVersionUploadTO, bpmnRepositoryId: string, bpmnDiagramId: string, options?: any): AxiosPromise<void> {
            return BpmnDiagramVersionControllerApiFp(configuration).createOrUpdateVersion(body, bpmnRepositoryId, bpmnDiagramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVersions(bpmnRepositoryId: string, bpmnDiagramId: string, options?: any): AxiosPromise<Array<BpmnDiagramVersionTO>> {
            return BpmnDiagramVersionControllerApiFp(configuration).getAllVersions(bpmnRepositoryId, bpmnDiagramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the latest version of the requested diagram
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersion(bpmnRepositoryId: string, bpmnDiagramId: string, options?: any): AxiosPromise<BpmnDiagramVersionTO> {
            return BpmnDiagramVersionControllerApiFp(configuration).getLatestVersion(bpmnRepositoryId, bpmnDiagramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bpmnRepositoryId 
         * @param {string} bpmnDiagramId 
         * @param {string} bpmnDiagramVersionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleVersion(bpmnRepositoryId: string, bpmnDiagramId: string, bpmnDiagramVersionId: string, options?: any): AxiosPromise<BpmnDiagramVersionTO> {
            return BpmnDiagramVersionControllerApiFp(configuration).getSingleVersion(bpmnRepositoryId, bpmnDiagramId, bpmnDiagramVersionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BpmnDiagramVersionControllerApi - object-oriented interface
 * @export
 * @class BpmnDiagramVersionControllerApi
 * @extends {BaseAPI}
 */
export class BpmnDiagramVersionControllerApi extends BaseAPI {
    /**
     * 
     * @param {BpmnDiagramVersionUploadTO} body 
     * @param {string} bpmnRepositoryId 
     * @param {string} bpmnDiagramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BpmnDiagramVersionControllerApi
     */
    public createOrUpdateVersion(body: BpmnDiagramVersionUploadTO, bpmnRepositoryId: string, bpmnDiagramId: string, options?: any) {
        return BpmnDiagramVersionControllerApiFp(this.configuration).createOrUpdateVersion(body, bpmnRepositoryId, bpmnDiagramId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} bpmnRepositoryId 
     * @param {string} bpmnDiagramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BpmnDiagramVersionControllerApi
     */
    public getAllVersions(bpmnRepositoryId: string, bpmnDiagramId: string, options?: any) {
        return BpmnDiagramVersionControllerApiFp(this.configuration).getAllVersions(bpmnRepositoryId, bpmnDiagramId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Return the latest version of the requested diagram
     * @param {string} bpmnRepositoryId 
     * @param {string} bpmnDiagramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BpmnDiagramVersionControllerApi
     */
    public getLatestVersion(bpmnRepositoryId: string, bpmnDiagramId: string, options?: any) {
        return BpmnDiagramVersionControllerApiFp(this.configuration).getLatestVersion(bpmnRepositoryId, bpmnDiagramId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} bpmnRepositoryId 
     * @param {string} bpmnDiagramId 
     * @param {string} bpmnDiagramVersionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BpmnDiagramVersionControllerApi
     */
    public getSingleVersion(bpmnRepositoryId: string, bpmnDiagramId: string, bpmnDiagramVersionId: string, options?: any) {
        return BpmnDiagramVersionControllerApiFp(this.configuration).getSingleVersion(bpmnRepositoryId, bpmnDiagramId, bpmnDiagramVersionId, options).then((request) => request(this.axios, this.basePath));
    }
}
