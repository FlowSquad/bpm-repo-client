/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
import {DiagramVersionTO, DiagramVersionUploadTO} from '../models';

/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DiagramVersionUploadTO} body 
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateVersion: async (body: DiagramVersionUploadTO, diagramId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrUpdateVersion.');
            }
            // verify required parameter 'diagramId' is not null or undefined
            if (diagramId === null || diagramId === undefined) {
                throw new RequiredError('diagramId','Required parameter diagramId was null or undefined when calling createOrUpdateVersion.');
            }
            const localVarPath = `/api/version/{diagramId}`
                .replace(`{${"diagramId"}}`, encodeURIComponent(String(diagramId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {string} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadVersion: async (diagramId: string, versionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'diagramId' is not null or undefined
            if (diagramId === null || diagramId === undefined) {
                throw new RequiredError('diagramId','Required parameter diagramId was null or undefined when calling downloadVersion.');
            }
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling downloadVersion.');
            }
            const localVarPath = `/api/version/{diagramId}/{versionId}/download`
                .replace(`{${"diagramId"}}`, encodeURIComponent(String(diagramId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVersions: async (diagramId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'diagramId' is not null or undefined
            if (diagramId === null || diagramId === undefined) {
                throw new RequiredError('diagramId','Required parameter diagramId was null or undefined when calling getAllVersions.');
            }
            const localVarPath = `/api/version/{diagramId}/all`
                .replace(`{${"diagramId"}}`, encodeURIComponent(String(diagramId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the latest version of the requested diagram
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersion: async (diagramId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'diagramId' is not null or undefined
            if (diagramId === null || diagramId === undefined) {
                throw new RequiredError('diagramId','Required parameter diagramId was null or undefined when calling getLatestVersion.');
            }
            const localVarPath = `/api/version/{diagramId}/latest`
                .replace(`{${"diagramId"}}`, encodeURIComponent(String(diagramId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {string} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: async (diagramId: string, versionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'diagramId' is not null or undefined
            if (diagramId === null || diagramId === undefined) {
                throw new RequiredError('diagramId','Required parameter diagramId was null or undefined when calling getVersion.');
            }
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling getVersion.');
            }
            const localVarPath = `/api/version/{diagramId}/{versionId}`
                .replace(`{${"diagramId"}}`, encodeURIComponent(String(diagramId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DiagramVersionUploadTO} body 
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateVersion(body: DiagramVersionUploadTO, diagramId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await VersionApiAxiosParamCreator(configuration).createOrUpdateVersion(body, diagramId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {string} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadVersion(diagramId: string, versionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await VersionApiAxiosParamCreator(configuration).downloadVersion(diagramId, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVersions(diagramId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DiagramVersionTO>>> {
            const localVarAxiosArgs = await VersionApiAxiosParamCreator(configuration).getAllVersions(diagramId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return the latest version of the requested diagram
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestVersion(diagramId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiagramVersionTO>> {
            const localVarAxiosArgs = await VersionApiAxiosParamCreator(configuration).getLatestVersion(diagramId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {string} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersion(diagramId: string, versionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiagramVersionTO>> {
            const localVarAxiosArgs = await VersionApiAxiosParamCreator(configuration).getVersion(diagramId, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {DiagramVersionUploadTO} body 
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateVersion(body: DiagramVersionUploadTO, diagramId: string, options?: any): AxiosPromise<void> {
            return VersionApiFp(configuration).createOrUpdateVersion(body, diagramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {string} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadVersion(diagramId: string, versionId: string, options?: any): AxiosPromise<string> {
            return VersionApiFp(configuration).downloadVersion(diagramId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVersions(diagramId: string, options?: any): AxiosPromise<Array<DiagramVersionTO>> {
            return VersionApiFp(configuration).getAllVersions(diagramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the latest version of the requested diagram
         * @param {string} diagramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersion(diagramId: string, options?: any): AxiosPromise<DiagramVersionTO> {
            return VersionApiFp(configuration).getLatestVersion(diagramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} diagramId 
         * @param {string} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(diagramId: string, versionId: string, options?: any): AxiosPromise<DiagramVersionTO> {
            return VersionApiFp(configuration).getVersion(diagramId, versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * 
     * @param {DiagramVersionUploadTO} body 
     * @param {string} diagramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public createOrUpdateVersion(body: DiagramVersionUploadTO, diagramId: string, options?: any) {
        return VersionApiFp(this.configuration).createOrUpdateVersion(body, diagramId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} diagramId 
     * @param {string} versionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public downloadVersion(diagramId: string, versionId: string, options?: any) {
        return VersionApiFp(this.configuration).downloadVersion(diagramId, versionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} diagramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public getAllVersions(diagramId: string, options?: any) {
        return VersionApiFp(this.configuration).getAllVersions(diagramId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Return the latest version of the requested diagram
     * @param {string} diagramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public getLatestVersion(diagramId: string, options?: any) {
        return VersionApiFp(this.configuration).getLatestVersion(diagramId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} diagramId 
     * @param {string} versionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public getVersion(diagramId: string, versionId: string, options?: any) {
        return VersionApiFp(this.configuration).getVersion(diagramId, versionId, options).then((request) => request(this.axios, this.basePath));
    }
}
